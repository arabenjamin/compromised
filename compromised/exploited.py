#!usr/bin/python
# -*- coding: utf-8 -*-
from hashlib import sha1
import os


def get_line_length(file_path):
    """ Get the length of the each line """
    with open(file_path, 'rb+') as f:
        return len(f.readline())

def isPwned(file_object, hash_hex, line_length, line_index, index_range):

    ''' Recursively find hash in file pwned-passwords-sha1-ordered-by-hash-v5.txt

             
        parameter: 
            file_object (obj):  the open file object we're working on is specificly
                                looking for pwned-passwords-sha1-ordered-by-hash-v5.txt
                                found at https://haveibeenpwned.com/Passwords
                                past versions of this file may not work as expected

        parameters:
            hash_hex (str): the hexdigest of the sha1 hash we're looking for
        parameter:
            line_length (int): the length of each line in the file
        paramter: 
            line_index (int): the index of the line we want to look at
                To get to the begining of any line multiply the line index 
                by line length ... unless that doesn't work
        parameter: 
            index_range (tuple): the min and max of the range of lines we're working on

        returns:
            results (tuple): first element beng a string
    '''
    


    #get the bytes for the line index
    pos = int(line_index)*line_length
    file_object.seek(pos ,0)
    line = file_object.readline()

    ''' handel the gotcha'''
    if len(line) != line_length:
        # we landed in the middle of a line ....
        # TODO:FIXME: Why was the last byte offset wrong?
        adj_pos = pos - (line_length - len(line)) 
        file_object.seek(adj_pos ,0)
        line = file_object.readline()

    if hash_hex == line.split(':')[0]:
        return True
        
    if index_range[0] == index_range[1] or (index_range[1] - index_range[0]) == 1:
        return False

    if hash_hex > line.split(':')[0]:
        # Goto next line_index Our next index should be greter than the current index
        next_index = line_index + (index_range[1]-line_index)/2
        # we need our next index range
        next_range = (line_index, index_range[1])
        return isPwned(file_object, hash_hex, line_length, int(next_index), next_range)

    elif hash_hex < line.split(':')[0]:
        # Goto next line_index down Our next index should be less than the current index
        next_index = line_index - (line_index - index_range[0])/2
        # we need our next index range
        next_range = (index_range[0], line_index)
        return isPwned(file_object, hash_hex, line_length, int(next_index), next_range)



